const app = require("../app");
const debug = require("debug")("app:server");
const http = require("http");
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.connection.once("open", async function () {
  console.info("MongoDB event open");
  console.debug("MongoDB connected [%s]", mongooseUrl);

  mongoose.connection.on("connected", function () {
    console.info("MongoDB event connected");
  });

  mongoose.connection.on("disconnected", function () {
    console.warn("MongoDB event disconnected");
  });

  mongoose.connection.on("reconnected", function () {
    console.info("MongoDB event reconnected");
  });

  mongoose.connection.on("error", function (err) {
    console.error("MongoDB event error: " + err);
  });

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
  return;
});

/**
 * Create Mongoose Connection
 */
// Uncomment if you are using remote mongo host
// const mongooseUrl = `mongodb://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_HOST}/${process.env.MONGO_DBNAME}`;
const mongooseUrl = process.env.MONGO_CONNECTION_STRING;

// mongoose.connect(
//   mongooseUrl,
//   { useNewUrlParser: true, useUnifiedTopology: true },
//   function (err) {
//     if (err) {
//       console.error("MongoDB connection error: " + err);
//       // return reject(err);
//       process.exit(1);
//     }
//   }
// );

async function connectToDatabase() {
  try {
    await mongoose.connect(mongooseUrl, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("MongoDB connected");
  } catch (err) {
    console.error("MongoDB connection error: " + err);
    process.exit(1);
  }
}
connectToDatabase();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
